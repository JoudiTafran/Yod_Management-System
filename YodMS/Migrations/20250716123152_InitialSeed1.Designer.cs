// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YodMS.Models.DataBase_Manager;

#nullable disable

namespace YodMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250716123152_InitialSeed1")]
    partial class InitialSeed1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YodMS.Models.DocumentTypes", b =>
                {
                    b.Property<int>("DocTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocTypeId");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            DocTypeId = 1,
                            TypeName = "تصور"
                        },
                        new
                        {
                            DocTypeId = 2,
                            TypeName = "تقرير"
                        },
                        new
                        {
                            DocTypeId = 3,
                            TypeName = "بيان"
                        },
                        new
                        {
                            DocTypeId = 4,
                            TypeName = "محضر"
                        },
                        new
                        {
                            DocTypeId = 5,
                            TypeName = "خطة"
                        });
                });

            modelBuilder.Entity("YodMS.Models.Documents", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("YodMS.Models.Reviews", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Decision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewerUserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("DocId");

                    b.HasIndex("ReviewerUserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("YodMS.Models.RoleDocPerms", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("DocTypeId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "DocTypeId");

                    b.HasIndex("DocTypeId");

                    b.ToTable("RoleDocPerms");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            DocTypeId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 3,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            DocTypeId = 3
                        },
                        new
                        {
                            RoleId = 3,
                            DocTypeId = 4
                        },
                        new
                        {
                            RoleId = 4,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 4,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 5,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 5,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 5,
                            DocTypeId = 5
                        },
                        new
                        {
                            RoleId = 6,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 6,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 6,
                            DocTypeId = 5
                        },
                        new
                        {
                            RoleId = 7,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 7,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 7,
                            DocTypeId = 5
                        },
                        new
                        {
                            RoleId = 8,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 8,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 8,
                            DocTypeId = 5
                        },
                        new
                        {
                            RoleId = 9,
                            DocTypeId = 1
                        },
                        new
                        {
                            RoleId = 9,
                            DocTypeId = 2
                        },
                        new
                        {
                            RoleId = 9,
                            DocTypeId = 5
                        });
                });

            modelBuilder.Entity("YodMS.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "رئيس الهيئة التنفيذية"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "نائب الرئيس"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "أمين عام"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "مسؤول مالي"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "مسؤول علاقات"
                        },
                        new
                        {
                            RoleId = 6,
                            RoleName = "مسؤول أكاديمي"
                        },
                        new
                        {
                            RoleId = 7,
                            RoleName = "مسؤول أنشطة"
                        },
                        new
                        {
                            RoleId = 8,
                            RoleName = "مسؤولة طالبات"
                        },
                        new
                        {
                            RoleId = 9,
                            RoleName = "مسؤول إعلامي"
                        },
                        new
                        {
                            RoleId = 10,
                            RoleName = "مٌراقب"
                        });
                });

            modelBuilder.Entity("YodMS.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneWhatsapp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YodMS.Models.VoteSessions", b =>
                {
                    b.Property<int>("VoteSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteSessionId"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoteSessionId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("VoteSessions");
                });

            modelBuilder.Entity("YodMS.Models.Votes", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"));

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoteSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoterUserId")
                        .HasColumnType("int");

                    b.HasKey("VoteId");

                    b.HasIndex("VoteSessionId");

                    b.HasIndex("VoterUserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("YodMS.Models.Documents", b =>
                {
                    b.HasOne("YodMS.Models.DocumentTypes", "DocType")
                        .WithMany("Documents")
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YodMS.Models.Users", "OwnerUser")
                        .WithMany("Documents")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocType");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("YodMS.Models.Reviews", b =>
                {
                    b.HasOne("YodMS.Models.Documents", "Document")
                        .WithMany("Reviews")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YodMS.Models.Users", "ReviewerUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("ReviewerUser");
                });

            modelBuilder.Entity("YodMS.Models.RoleDocPerms", b =>
                {
                    b.HasOne("YodMS.Models.DocumentTypes", "DocumentType")
                        .WithMany("RoleDocPerms")
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YodMS.Models.Roles", "Role")
                        .WithMany("RoleDocPerms")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YodMS.Models.Users", b =>
                {
                    b.HasOne("YodMS.Models.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YodMS.Models.VoteSessions", b =>
                {
                    b.HasOne("YodMS.Models.Users", "CreatedByUser")
                        .WithMany("VoteSessionsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("YodMS.Models.Votes", b =>
                {
                    b.HasOne("YodMS.Models.VoteSessions", "VoteSession")
                        .WithMany("Votes")
                        .HasForeignKey("VoteSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YodMS.Models.Users", "VoterUser")
                        .WithMany("Votes")
                        .HasForeignKey("VoterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VoteSession");

                    b.Navigation("VoterUser");
                });

            modelBuilder.Entity("YodMS.Models.DocumentTypes", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("RoleDocPerms");
                });

            modelBuilder.Entity("YodMS.Models.Documents", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("YodMS.Models.Roles", b =>
                {
                    b.Navigation("RoleDocPerms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("YodMS.Models.Users", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Reviews");

                    b.Navigation("VoteSessionsCreated");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("YodMS.Models.VoteSessions", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
